一、起步
前提条件：
1.安装了 Node.js 的最新版本
2.基本安装：
创建一个目录: mkdir webpack-demo && cd webpack-demo
初始化npm( 初始化一个package.json 描述文件): npm init -y /npm init
安装 webpack 
安装最新版本: npm install --save-dev webpack
安装特定版本: npm install --save-dev webpack@<version>
安装 CLI
如果你使用 webpack 4+ 版本，你还需要安装 CLI。
本地安装: npm install --save-dev webpack-cli 
当你在本地安装 webpack 后，你能够从 node_modules/.bin/webpack 访问它的 bin 版本
全局安装: npm install --global webpack
3.创建以下目录结构、文件和内容：
4.执行 npx webpack
会将我们的脚本作为入口起点，然后 输出 为 main.js。
Node 8.2+ 版本提供的 npx 命令，可以运行在初始安装的 webpack 包(package)的 webpack 二进制文件（./node_modules/.bin/webpack）
5.使用配置文件
新建一个webpack.config.js文件
配置入口和出口文件：
const path = require('path');
module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  }
};
然后通过新配置文件再次执行构建
npx webpack --config webpack.config.js
6.NPM 脚本(NPM Scripts)
"scripts": {
      "build": "webpack"
 },
 可以使用 npm run build 命令，来替代我们之前使用的 npx 命令
 通过向 npm run build 命令和你的参数之间添加两个中横线，可以将自定义参数传递给 webpack，例如：npm run build -- --colors
 
 二、管理资源
1.加载 CSS
为了从 JavaScript 模块中 import 一个 CSS 文件，你需要在 module 配置中 安装并添加 style-loader 和 css-loader：
npm install --save-dev style-loader css-loader

设置webpack.config.js文件：

  const path = require('path');

  module.exports = {
    entry: './src/index.js',
    output: {
      filename: 'bundle.js',
      path: path.resolve(__dirname, 'dist')
    },
+   module: {
+     rules: [
+       {
+         test: /\.css$/,
+         use: [
+           'style-loader',
+           'css-loader'
+         ]
+       }
+     ]
+   }
  };
  在项目中添加一个新的 style.css 文件，并将其导入到我们的 index.js 中
   import _ from 'lodash';
+ import './style.css';

  function component() {
    var element = document.createElement('div');

    // lodash 是由当前 script 脚本 import 导入进来的
    element.innerHTML = _.join(['Hello', 'webpack'], ' ');
+   element.classList.add('hello');

    return element;
  }

  document.body.appendChild(component());
  
然后执行构建命令 npm run build，完成后检查页面是否有变化

2.加载图片
假想，现在我们正在下载 CSS，但是我们的背景和图标这些图片，要如何处理呢？使用 file-loader，我们可以轻松地将这些内容混合到 CSS 中：
npm install --save-dev file-loader

修改webpack.config.js文件

  const path = require('path');

  module.exports = {
    entry: './src/index.js',
    output: {
      filename: 'bundle.js',
      path: path.resolve(__dirname, 'dist')
    },
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            'style-loader',
            'css-loader'
          ]
        },
+       {
+         test: /\.(png|svg|jpg|gif)$/,
+         use: [
+           'file-loader'
+         ]
+       }
      ]
    }
  };
  
  在项目中添加一个图片
  修改src/index.js文件
  import _ from 'lodash';
  import './style.css';
+ import Icon from './icon.png';

  function component() {
    var element = document.createElement('div');
    // Lodash，现在由此脚本导入
    element.innerHTML = _.join(['Hello', 'webpack'], ' ');
    element.classList.add('hello');

+   // 将图像添加到我们现有的 div。
+   var myIcon = new Image();
+   myIcon.src = Icon;
+
+   element.appendChild(myIcon);

    return element;
  }
  document.body.appendChild(component());
  
  在src/style.css中添加背景图片
  .hello {
    color: red;
+   background: url('./icon.png');
  }
然后执行构建命令 npm run build，完成后检查页面图片有没有展示出来
3.file-loader 和 url-loader 可以接收并加载任何文件，然后将其输出到构建目录。这就是说，我们可以将它们用于任何类型的文件，包括字体
修改webpack.config.js文件
  const path = require('path');

  module.exports = {
    entry: './src/index.js',
    output: {
      filename: 'bundle.js',
      path: path.resolve(__dirname, 'dist')
    },
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            'style-loader',
            'css-loader'
          ]
        },
        {
          test: /\.(png|svg|jpg|gif)$/,
          use: [
            'file-loader'
          ]
        },
+       {
+         test: /\.(woff|woff2|eot|ttf|otf)$/,
+         use: [
+           'file-loader'
+         ]
+       }
      ]
    }
  };
  在项目中添加一些字体
   webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
    |- bundle.js
    |- index.html
  |- /src
+   |- my-font.woff
+   |- my-font.woff2
    |- icon.png
    |- style.css
    |- index.js
  |- /node_modules
  
