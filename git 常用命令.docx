创建版本库：
#克隆远程版本库（不指定分支，默认下载master代码）
$ git clone <url>
#克隆远程版本库到指定目录
$ git clone <url> [dir]
##克隆指定远程分支的版本库
$ git clone -b [branch-name] <url>
#在当前目录新建一个git代码库
$ git init
#新建一个目录，将其初始化为git代码库
$ git init [project-name]

增加/删除文件:
#添加指定文件到暂存区
$ git add [file1] [file2] ...
##添加指定目录到暂存区，包括子目录
$ git add [dir]
#添加当前目录得所有文件到暂存区
$ git add .
#添加每个变化前都会要求确认，对于同一文件的多处变化可以实现分次提交
$ git add -p
#删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2]

代码提交:
#提交暂存区到仓库区
$ git commit -m [message]
#提交暂存区的指定文件到仓库区
git commit [file1] [file2] ... -m [message]
#使用一次新的commit，替代上一次提交，如果代码没有任何新的变化，则来改写上次commit的提交信息
$ git commit --amend -m [message]
#重做上一次commit,并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...

储藏：
#储藏变更
$ git stash 
#查看现有的储藏
$ git stash list
#使用最近的储藏
$ git stash apply
#使用某次的储藏
$ git stash apply [stashName]
#重新应用被暂存的变更
$ git stash apply --index
#从栈中移除某个储藏
$ git stash drop [stashName]
#重新应用储藏，同事立刻将其从堆栈中移走
$ git stash pop

分支:
#列出所有本地分支
$ git branch
#列出所有远程分支
$ git branch -r
#列出所有本地分支和远程分支
$ git branch -a
#新建一个分支，但依然提留在当前分支
$ git branch [branch-name]
#新建一个分支，并切换到该分支
$ git checkout -b [branch-name]
